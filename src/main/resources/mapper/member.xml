<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.member">

    <select id="userLogin" parameterType="Map" resultType="Map">
        SELECT *
        FROM member
        where id=#{id} and pw=#{pw} and level='user'
        limit 1
    </select> 

    <select id="partnerLogin" parameterType="Map" resultType="Map">
        SELECT *
        FROM member
        where id=#{id} and pw=#{pw} and level='partner'
        limit 1
    </select> 

    <select id="selectMemberList" parameterType="Map" resultType="Map">
    SELECT m.*,
        CASE
            WHEN (m.parentsIdx = -1) THEN '본사'
            ELSE (SELECT id FROM member p WHERE p.idx = m.parentsIdx)
        END AS parentId,
        COALESCE(unread_chats.unread_count, 0) AS unread_chat_count,
        COALESCE(
            (SELECT
                CASE
                    WHEN EXISTS (SELECT 1 FROM verificationlog v WHERE v.useridx = m.idx AND v.confirm = 1) THEN 1
                    WHEN EXISTS (SELECT 1 FROM verificationlog v WHERE v.useridx = m.idx AND v.confirm = 0) THEN 0
                    ELSE -1
                END
            ), -1
        ) AS vStat
    FROM member m left join aiplanuserlist a on m.idx = a.userIdx
    LEFT JOIN (
        SELECT userIdx, COUNT(*) AS unread_count
        FROM chat
        WHERE managerRead = 0
        GROUP BY userIdx
    ) unread_chats ON m.idx = unread_chats.userIdx
    WHERE 1=1
    <if test="partnerIdx != null and partnerIdx != ''">
        AND m.parentsIdx = #{partnerIdx}
    </if>
    <if test="search != null and search != ''">
        <if test="searchSelect == 'parentsIdx'">
            AND m.${searchSelect} = #{search}
            AND m.level = 'user'
        </if>
        <if test="searchSelect != 'parentsIdx'">
            AND m.${searchSelect} LIKE CONCAT('%', #{search}, '%')
        </if>
    </if>
    <if test="level != null and level != ''">
        AND m.level = #{level}
    </if>
    <if test="test != 'test'">
        AND m.isTest != 1
    </if>
    <if test="ban == 'ban'">
        AND m.isBan = 1
    </if>
    <if test="aiPlan != null and aiPlan != ''">
        and a.idx is not null
    </if>
    <choose>
        <when test="chatSort != null and chatSort == 'chat'">
            ORDER BY unread_chat_count DESC
        </when>
        <when test="order != null and order != ''">
            ORDER BY ${order} ${orderAD}
        </when>
        <otherwise>
            ORDER BY m.idx DESC
        </otherwise>
    </choose>
    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
</select>
    <select id="selectMemberListCnt" parameterType="Map" resultType="Integer">
        select count(*)
        from member left join aiplanuserlist a on member.idx = a.userIdx
        WHERE 1=1
            <if test="partnerIdx != null and partnerIdx != ''">
                and parentsIdx = #{partnerIdx}
            </if>
            
            <if test="search != null and search != ''">
                and ${searchSelect} like concat('%',#{search},'%')
                <if test="searchSelect == 'parentsIdx'">
                    and level = 'user'
                </if>
            </if>

            <if test="level != null and level != ''">
                and level = #{level}
            </if>

            <if test="test != 'test'">
                and isTest != 1
            </if>
            <if test="ban == 'ban'">
                and isBan = 1
            </if>
            <if test="aiPlan != null and aiPlan != ''">
                and a.idx is not null
            </if>
    </select>
    
    <select id="selectMemberDetail" parameterType="Map" resultType="Map">
        select *
            , CASE
                WHEN (parentsIdx = -1) THEN '본사'
                ELSE (select id from member p where p.idx = member.parentsIdx)
            END as parentId
            , CASE
                WHEN (parentsIdx = -1) THEN (select inviteCode from admin limit 1)
                ELSE (select inviteCode from member p where p.idx = member.parentsIdx)
            END as parentCode 
            , COALESCE(
                    (SELECT
                        CASE
                            WHEN EXISTS (SELECT 1 FROM verificationlog v WHERE v.useridx = member.idx AND v.confirm = 1) THEN 1
                            WHEN EXISTS (SELECT 1 FROM verificationlog v WHERE v.useridx = member.idx AND v.confirm = 0) THEN 0
                            ELSE -1
                        END
                    ), -1
                ) AS vStat
        from member 
        WHERE idx=#{idx}
            <if test="partnerIdx != null and partnerIdx != ''">
                and parentsIdx = #{partnerIdx}
            </if>
    </select>

    <select id="selectMemberCheckId" parameterType="Map" resultType="Map">
        select *
        from member 
        WHERE id=#{id}
        limit 1
    </select>
    <select id="selectMemberCheckInviteCode" parameterType="Map" resultType="Map">
        select *
        from member 
        WHERE inviteCode=#{inviteCode}
        limit 1
    </select>
    <select id="selectMemberCheckPhone" parameterType="Map" resultType="Map">
        select *
        from member 
        WHERE phone=#{phone}
        limit 1
    </select>
    <select id="selectAllMemberIdx" parameterType="Map" resultType="Map">
        select idx
        from member 
    </select>
    <select id="selectMemberCheckName" parameterType="Map" resultType="Map">
        select *
        from member 
        WHERE name=#{name}
       
        limit 1
    </select>
    <insert id="insertMember">        
        INSERT INTO member
				( name
                <if test="parentsIdx != null and parentsIdx != ''">
                    , parentsIdx
                </if>
                    , level
                    , id
                    , pw
                    , phone
                <if test="inviteCode != null and inviteCode != ''">
                    , inviteCode
                </if>
                <if test="state != null and state != ''">
                    , state
                </if>
                    , jdate
                    , isTest
                 )
			VALUES ( #{name}
                <if test="parentsIdx != null and parentsIdx != ''">
                    , #{parentsIdx}
                </if>
                    , #{level}
                    , #{id}
                    , #{pw}
                    , #{phone}
                <if test="inviteCode != null and inviteCode != ''">
                    , #{inviteCode}
                </if>
                <if test="state != null and state != ''">
                    , #{state}
                </if>
                    , now()
                    , #{isTest}
                 )
        <selectKey keyProperty="idx" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>  

    <update id="updateMemberInfo">
        update member 
        set ${kind} = #{value}
        WHERE idx=#{idx}
    </update>
    <update id="updateMemberBan">
        update member 
        <if test="kind == 'ban'">
            set isBan  = 1
        </if>
        <if test="kind == 'release'">
            set isBan  = 0
        </if>
        WHERE idx=#{idx}
    </update>
    <update id="updateMemberFutures">
        update member 
        set futures  = #{futures}
        WHERE idx=#{userIdx}
    </update>
</mapper>