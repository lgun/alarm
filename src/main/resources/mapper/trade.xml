<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.trade">

   <insert id="insertAitradeProcess">        
        INSERT INTO aitrade( 
            coin
            , days
            , minProfitRate
            , maxProfitRate
            , showMinProfitRate
            , showMaxProfitRate
            , minAmount
            , maxAmount
        ) VALUES (
                #{coin}
            , #{days}
            , #{minProfitRate}
            , #{maxProfitRate}
            , #{showMinProfitRate}
            , #{showMaxProfitRate}
            , #{minAmount}
            , #{maxAmount}
        )
    </insert>

    <select id="selectAitradeList" parameterType="Map" resultType="Map">
        SELECT a.*,
           CASE 
               WHEN 1 IS NOT NULL THEN 
                   CASE 
                       WHEN EXISTS (
                           SELECT 1 
                           FROM aitradedata ad 
                           WHERE ad.aiTradeIdx = a.idx 
                           AND ad.userIdx = 1
                       ) THEN 'Y'
                       ELSE 'N'
                   END
               ELSE NULL
           END AS isApplied
        FROM aitrade a
        WHERE a.state != -1
    </select>

    <select id="selectAitradeCnt" parameterType="Map" resultType="Integer">
        select count(*)
        from aitrade 
        where state != -1
    </select>
   
    <select id="selectAiTradeForIdx" parameterType="Map" resultType="Map">
        select *
        from aitrade 
        where idx = #{aiTradeIdx}
    </select>
     <select id="selectAiTradeDataForIdx" parameterType="Map" resultType="Map">
        select a.*,ai.coin,ai.days, ai.showMinProfitRate, ai.showMaxProfitRate 
        from aitradedata a inner JOIN aitrade ai ON ai.idx = a.aiTradeIdx
        where a.idx = #{idx}
    </select>


    <insert id="insertAitradeDataProcess" parameterType="map" useGeneratedKeys="true" keyProperty="aidx">        
        INSERT INTO aitradedata( 
            userIdx
            , coinNum
            , futuresAmount
            , minProfitRate
            , maxProfitRate
            , tdate
            , aiTradeIdx
            <if test="limitRate != null and limitRate != ''">
                , limitRate
            </if>
            <if test="isRaise != null and isRaise != ''">
                , isRaise
            </if>
        ) VALUES (
                #{userIdx}
            , #{coinNum}
            , #{futuresAmount}
            , #{minProfitRate}
            , #{maxProfitRate}
            , now()
            , #{aiTradeIdx}
            <if test="limitRate != null and limitRate != ''">
                , #{limitRate}
            </if>
            <if test="isRaise != null and isRaise != ''">
                , #{isRaise}
            </if>
        )
    </insert>

    <select id="selectAiTradeDataCheck" parameterType="Map" resultType="Map">
        select *
        from aitradedata
        where userIdx = #{userIdx} 
        and aiTradeIdx = #{aiTradeIdx}
        and state = 0 
        limit 1
    </select>
    <select id="selectAiTradeDataCheckState" parameterType="Map" resultType="Map">
        select ad.*, ai.days
        from aitradedata ad inner join aitrade ai on ad.aiTradeIdx = ai.idx
        where ad.userIdx = #{userIdx} 
        and ad.aiTradeIdx = #{aiTradeIdx}
        and ad.state = #{state}
        <if test="isRaise != null and isRaise != ''">
            and ad.isRaise=#{isRaise}
        </if>
        limit 1
    </select>
     <select id="selectAitradeDataReadyCnt" parameterType="Map" resultType="Integer">
        select count(*)
        from aitradeData
        where state = -1
            <if test="parentsIdx != null and parentsIdx != ''">
                and (select parentsIdx from member where member.idx=aitradeData.userIdx)=#{parentsIdx}
            </if>
    </select>
    <select id="selectUserAiTradeDataList" parameterType="Map" resultType="Map">
        select a.*,ai.coin,ai.days, ai.showMinProfitRate, ai.showMaxProfitRate 
        from aitradedata a inner JOIN aitrade ai ON ai.idx = a.aiTradeIdx
        where userIdx = #{userIdx} 
        and a.state = 0
    </select>

    <select id="selectRunAiTradeDataList" parameterType="Map" resultType="Map">
        select *
        from aitradedata
        where 1 = 1
    </select>

    <insert id="insertTradelog" parameterType="Map">        
        INSERT INTO tradelog( 
            userIdx
            , symbol
            , orderType
            , marginType
            , position
            , entryPrice
            , buyQuantity
            , leverage
            , fee
            , result
            , margin
            , isOpen
            , liqPrice
            , afterWallet
            , buyDateTime
            , realDateTime
        ) VALUES (
            #{userIdx}
            , #{symbol}
            , #{orderType}
            , #{marginType}
            , #{position}
            , #{entryPrice}
            , #{buyQuantity}
            , #{leverage}
            , #{fee}
            , #{result}
            , #{margin}
            , #{isOpen}
            , #{liqPrice}
            , #{afterWallet}
            , #{buyDateTime}
            , #{realDateTime}
        )
    </insert>
    
    <select id="selectTradeList" parameterType="Map" resultType="Map">
        select t.*, m.id
        from tradelog t left join member m on m.idx=t.userIdx
        where 1=1
            <if test="search != null and search != ''">
                <if test="searchSelect == 'm.parentsIdx'">
                    and ${searchSelect} = #{search}
                </if>
                <if test="searchSelect != 'm.parentsIdx'">
                    and ${searchSelect} like concat('%',#{search},'%')
                </if>
            </if>
            <if test="userIdx != null and userIdx != ''">
                and userIdx = #{userIdx}
            </if>
            <if test="parentsIdx != null and parentsIdx != ''">
                and m.parentsIdx = #{parentsIdx}
            </if>
            <if test="symbol != null and symbol != ''">
                and symbol = #{symbol}
            </if>
            <if test="test != 'test'">
                AND m.isTest != 1
            </if>
            <if test="sdate != null and sdate != ''">
                and DATE(buyDateTime) between #{sdate} and #{edate}
            </if>
        order by buyDateTime desc
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>
    <select id="selectTradeListCnt" parameterType="Map" resultType="Integer">
        select count(*)
        from tradelog t left join member m on m.idx=t.userIdx
        where 1=1
            <if test="search != null and search != ''">
                <if test="searchSelect == 'm.parentsIdx'">
                    and ${searchSelect} = #{search}
                </if>
                <if test="searchSelect != 'm.parentsIdx'">
                    and ${searchSelect} like concat('%',#{search},'%')
                </if>
            </if>
            <if test="userIdx != null and userIdx != ''">
                and userIdx = #{userIdx}
            </if>
            <if test="parentsIdx != null and parentsIdx != ''">
                and m.parentsIdx = #{parentsIdx}
            </if>
            <if test="symbol != null and symbol != ''">
                and symbol = #{symbol}
            </if>
            <if test="test != 'test'">
                AND m.isTest != 1
            </if>
            <if test="sdate != null and sdate != ''">
                and DATE(buyDateTime) between #{sdate} and #{edate}
            </if>
    </select>
    <update id="updateAiTradeDataByAdmin">
        update aitradedata 
        set idx=idx
        <if test="state != null and state != '' and state !='null'">
            , state = #{state}
        </if>
        <if test="alarm != null and alarm != '' and alarm !='null'">
            , alarm = #{alarm}
        </if>
         <if test="startDate != null and startDate != '' and startDate !='null'">
            , startDate = #{startDate}
        </if>
         <if test="endDate != null and endDate != '' and endDate !='null'">
            , endDate = #{endDate}
        </if>
        WHERE idx=#{idx}
    </update>

</mapper>